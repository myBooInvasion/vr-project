/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.2 Door.glb --transform --shadows --keepnames
*/

import React, { useRef } from 'react';
import { useFrame } from '@react-three/fiber';
import { useGLTF, useKeyboardControls } from '@react-three/drei';
import { RigidBody, quat, useRapier, vec3 } from '@react-three/rapier';
import { Ray } from '@dimforge/rapier3d-compat';
import { Quaternion } from 'three';

const qunionRotate = new Quaternion();

export function Door(props) {
  // Refs
  const doorRef = useRef();

  // useGLTF
  const { nodes, materials } = useGLTF('/model/Door-transformed.glb');

  // Keys hook
  const [,getKey] = useKeyboardControls();

  // Rapier
  const rapier = useRapier();

  // Frame loop
  useFrame((state, delta) => {
    const { action } = getKey();
    const world = rapier.world.raw();
    const doorPosition = doorRef.current.translation()
    const ray = new Ray(vec3(doorPosition), vec3({x: 0, y: 0, z: 1}));
    const intersection = world.castRay(ray, 1.5, false, undefined, undefined, undefined, doorRef.current);
    
    if (intersection) {
      const rotate = doorRef.current.rotation();
      qunionRotate.copy(quat(rotate));
      if (action) {
        qunionRotate._y >= -Math.PI/2 && (qunionRotate._y -= 0.01);
      } else {
        qunionRotate._y <= 0 && (qunionRotate._y += 0.01);
      }
      doorRef.current.setRotation(quat(qunionRotate));
    }
  });

  return (
    <group {...props} dispose={null}>
      <RigidBody ref={doorRef} colliders='trimesh' type='fixed' position={[0, 0.2, 0]}>
        <group name='Doors'>
          <mesh name="Door" castShadow receiveShadow geometry={nodes.Door.geometry} material={materials['Afromosia Fine Wood']} position={[0, 1.06, 0]} scale={[1, 0.93, 1]} />
          <mesh name="Glass" receiveShadow geometry={nodes.Glass.geometry} material={materials.Glass} position={[-0.28, 1.1, 0]} />
        </group>
      </RigidBody>
    </group>
  );
}

useGLTF.preload('/model/Door-transformed.glb');
